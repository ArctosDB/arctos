<cfinclude template="/includes/_helpHeader.cfm">
<cfset title = "Containers">
<p><font size="-2"><a href="index.cfm">Help</a> >> <a href="definitions_standards_index.cfm">Definitions and Standards</a> >> <strong>Containers</strong></font><br />
<font size="+2">Containers</font>

<table border="0" align="left" cellpadding="10">
<tr><td>
	<cfinclude template="includes/container_idx.cfm">
</td></tr></table>

<p>Collection Objects are physically located in containers, and 
the concept of Containers reflects that reality.
Not only are collection objects located in containers, but containers are located within larger containers
and this relationship is reflected in a recursive, parent-child relationship.
Thus, every container has one parent container, except for "Container Zero" (the Parentless Void).
For example, a tissue sample is typically in a <strong>cryovial</strong>, 
within a <strong>position</strong> in a <strong>freezer box</strong>,
within a <strong>position</strong> in a <strong>freezer rack</strong>,
within a <strong>freezer</strong> in a <strong>room</strong>...seven containers.
With each container uniquely labeled with a barcode, tracking objects becomes
mostly a matter of scanning a new parent-container ID into the record of a child container.
In the example above, the approximately 1,300 samples in a freezer rack can be tracked
from one freezer to another by the scanning barcode on the freezer rack and its new parent ID
(the barcode on the freezer).</p>
<p>
<div class="fldDef">
	Container . Container_Type<br/>
	VARCHAR(20) not null<br/>
	ctcontainer_type
</div>
<a name="container_type"><strong>Container Type:</strong></a> Vials, jars, boxes, shelves, and rooms are all Container Types. Vocabulary is controlled, and should be limited to unambiguous, and  mutually exclusive kinds of containers.</p>
<p> 
The Container Type &quot;Position&quot; is locked by programmed logic within its Parent Container.
Examples of Positions include entities which cannont be physically moved from their
Parent Container such as slots within freezer racks, slots for vials within 
freezer boxes, and positions for racks within freezers.
In order create a Position, a Parent Container must be assigned.

<p>
<div class="fldDef">
	Container . Parent_Container_id<br/>
	NUMBER not null
</div>
<strong><a name="parent_container">Parent Container:</a></strong>
This is the value that identifies the container into which another (child) Container has been placed.
The value is not displayed in applications because Parent Containers are 
generally displayed by their Labels and entered into forms by their Barcode.
</p>
<p>
<div class="fldDef">
	Container . Barcode<br/>
	VARCHAR(50) null
</div>

<p><strong><a name="barcode">Barcode:</a></strong> 
A barcode is a string of characters unique to a container.
Most barcode values are meaningless "dumb numbers" that serve simply
to associate a physical container with the information about the container.
The characters are represented in a machine-readable font,
Code Three of Nine (usually called Code 39).
Most barcode labels are specialized, preprinted labels that we order in lots
but it is often convenient to make labels for specific applications.
Barcode labels can be generated by installing a barcode font on a computer and printing to a laser printer.
Code 39 can be <a href="http://www.idautomation.com/fonts/free/">downloaded</a> for free.
Asterisks are the stop and start codons for Code 39, 
so an expression such as *1234* will be read as 1234 by a 
barcode scanner.</p> 

<p>Barcodes other than Code 39 can be used.
Barcode scanners that are capable of recognizing any 
several coding pardigms are increasingly affordable.
Codes other than Code 39 may be particularly useful
when applying large values to small labels.

<p>
<div class="fldDef">
	Container . Label<br/>
	VARCHAR(255) not null
</div>
<strong><a name="label">Label</a></strong>  
is the descriptive value that is displayed in most of our object-tracking applications.
It should usually represent something that appears on the container.
In many cases, this will be the value of the barcode which is displayed
in human-readable fonts on most barcode labels.</p>

<p>Many "legacy containers" are not easily barcoded, especially if they are numerous
and stored at low temperatures.
Therefore, Label should certainly be the value that appears in physical searches
for un-barcoded containers.</p>

<p>Some object-tracking applications simplify the container hierarchy by reporting only 
the positions (Containers of the type Position) for a Collection Object.
Thus, in order to find a tissue sample in the freezers,
you do not need to know the label of the freezer box or the freezer rack.
You need know only the positions of the box and rack.
For these applications, the Labels of positions might usefully
indicate the parent container of the position.
For example, the Label of position 6-B in Freezer 6 
is &quot;Frzr6&nbsp;6-B,&quot; not just &quot;6-B.&quot;

<p>
<div class="fldDef">
	Container . Description<br/>
	VARCHAR(255) null
</div>
<strong><a name="description">Description</a></strong> 
is a useful expansion of Label.
"Room 363" is useful as a label, but something like 
&quot;The processing room in the south wing of the Biology Annex&quot;
may be expeditious.
</p>


<p>
<div class="fldDef">
	Container_History . Install_Date<br/> 
	DATETIME not null
</div>
<strong><a name="install_date">Install Date</a></strong> 
This is the date on which the Parent Container was last changed,
<i>i.e.</i>, the date on which the Container was placed in its parent.
Often, this is defaulted to the system date.</p>

<p>
<div class="fldDef">
	Container . container_remarks<br/> 
	VARCHAR(255) null
</div>
<strong><a name="remarks">Remarks</a></strong>
is the place to record notes and about the container or its contents.
Remarks are especially useful in explaining the nature and treatment of legacy containers
(<i>i.e.,</i> containers without barcode labels).</p>

<p>
<div class="fldDef">
	Container . print_fg<br/>
	NUMBER(1) null
</div>
<strong><a name="print_flag">Print Flag</a></strong> 
is a temporary flag that can be set for the purpose of printing container labels.</p>

<p>
<div class="fldDef">
	Container . width <br/>
	Container . height<br/>
	Container . length <br/>
	NUMBER null
</div>
<strong><a name="width_height_length">Width, Height, Length</a></strong> 
are dimensions of a container in centimeters. 
Decimal fractions can be used.
Because movement of objects involves two barcode scans that relate
a child container to a parent container, there is a risk of 
accidentally reversing these two values.
These dimensions are used in logic that prevents scanning a container into a parent that is 
smaller than itself.</p>
<p>Some common container dimensions:
<table border>
<tr align="center"><th>Container</th>
<th>Width</th>
<th>Height</th>
<th>Length</th>
</tr>
<tr align="center"><td>13-slot freezer rack</td><td>14</td><td>73</td><td>14</td></tr>
<tr align="center"><td>slot in freezer rack</td><td>13.5</td><td>5.5</td><td>13.5</td></tr>
<tr align="center"><td>regular (2 inch) freezer box</td><td>13</td><td>5</td><td>13</td></tr>
<tr align="center"><td>2-dram shell vial</td>
<td>2</td>
<td>5.6</td>
<td>2</td>
</tr>
</table></p>
<p>
<div class="fldDef">
	Container . Number_Positions<br/>
	INTEGER null
</div>	
<strong><a name="number_of_positions">Number of Positions:</a></strong> 
Some containers have immovable subcontainers of the Container Type Position.
For example, many freezer boxes designed to contain cryovials have either 81 (9 X 9 rows)
or 100 (10 X 10 rows) subdivisions, or fixed positions, for cryovials.
Recording the number of positions in a container allows us to
make forms specific to tasks such as scanning cryovials into
a 100-position freezer box versus an 81-position freezer box.
</p>
<p>
<div class="fldDef">
	Container . institution_acronym<br/>
	VARCHAR(20) not null
</div>
<strong><a name="institution">Institution</a></strong> 
is an abbreviation that indicates which institution's container this is.
There are two possible values at this writing: UAM and MSB.</p>
<p>
<strong><a name="searching">Searching</a></strong> 
</p>
The Containers and Parts search form is written in AJAX/DHTML - it does not behave like traditional web forms.
<ul>
	<li>
		The form is never submitted. If you click a control and nothing happens in a reasonable time, file a bug report.
	</li>
	<li>
		Clicking controls repeatedly may "clog up the pipe" to the database. Don't do it.
	</li>
	<li>
		A reasonable browser is required. As always, we recommend <a href="http://www.mozilla.com/firefox/central/" target="_blank">Firefox</a>.
	</li>
	<li>
		You must have JavaScript enabled and allow pop-ups from arctos.database.museum
	</li>
</ul>
Note that there are two forms. Container and Part searches are distinct.
<p>
	General usage guidelines:
<ul>
		<li>Create a tree by searching for something in the form. Search for containers by clicking the button from parts, and vice-versa. This switch is DHTML - the form will not reload.</li>
		<li>Drag/Drop is disabled. You can't do it in this application. Feel free to try.</li>
		<li>
			Doubleclick a "node" to find children of a container.
		</li>
		<li>
			Check (or uncheck) a node to get a popup with details about the container and links to other applications.
		</li>
		<li>Most links open in the right frame. Some open in a new page.</li>
</ul>
</p>

<cfinclude template="/includes/_helpFooter.cfm">